type Query {
    "Returns the list of users."
    users: [User!]!
    "Returns the user with the given ID."
    user(
        "ID of the user"
        id: String!
    ): User!
    "Returns the list of posts from a user."
    posts(
        "ID of the user"
        id: String
    ): [Post!]!
}

"Represents the User type in the GraphQL schema."
type User {
    "The `id` of the User"
    id: String!
    "The `name` of the User"
    name: String!
    "The `age` of the User"
    age: Int!
    "The `posts` posted by the User"
    posts: [Post!]!
}

"Represents the Post type in the GraphQL schema."
type Post {
    "The `id` of the Post"
    id: String!
    "The `title` of the Post"
    title: String!
    "The `content` of the Post"
    content: String!
    "The `author` of the Post"
    user: User!
}

type Mutation {
    "Creates a new user."
    createUser(
        "User to be created"
        user: NewUser!
    ): User!
    "Deletes a user. Only the user can delete their own account. Will return an authentication/authorization error if the user cannot be authenticated/authorized."
    deleteUser(
        "ID of the user"
        id: String!
    ): User!
    "Creates a new post. Can return authentication error if the user is not authenticated."
    createPost(
        "Post to be created"
        post: NewPost!
    ): Post!
    "Deletes a post with the given ID. Can return authentication/authorization errors if the user cannot be authenticated/authorized."
    deletePost(
        "ID of the post"
        id: String!
    ): Post!
}

"Represents the NewUser type in the GraphQL schema."
input NewUser {
    "The `name` of the User"
    name: String!
    "The `age` of the User"
    age: Int!
}

"Represents the NewPost type in the GraphQL schema."
input NewPost {
    "The `title` of the Post"
    title: String!
    "The `content` of the Post"
    content: String!
}

type Subscription {
    "Subscribe to new posts."
    newPosts: Post!
}
